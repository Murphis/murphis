{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "buildCurveAndCreateConfigByMarketCap-form",
  "type": "registry:block",
  "title": "Build Curve and Create Config by Market Cap Form",
  "description": "A simple build curve and create config by market cap form component.",
  "dependencies": [
    "@solana/web3.js",
    "@solana/spl-token",
    "@solana/wallet-adapter-react",
    "meteora-dbc"
  ],
  "registryDependencies": [
    "input",
    "button",
    "form",
    "card",
    "sonner",
    "select",
    "dialog",
    "dropdown-menu"
  ],
  "files": [
    {
      "path": "components/ui/murphis/buildCurveAndCreateConfigByMarketCap-form.tsx",
      "content": "'use client';\n\nimport { useState, useEffect, useContext } from 'react';\nimport { useForm } from \"react-hook-form\";\nimport { toast } from \"sonner\";\nimport { Loader2, ExternalLink, CheckCircle, Settings } from \"lucide-react\";\nimport { PublicKey, Transaction, Keypair } from \"@solana/web3.js\";\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport { DynamicBondingCurveClient } from '@meteora-ag/dynamic-bonding-curve-sdk';\nimport BN from 'bn.js';\n\n// UI components\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ConnectWalletButton } from \"./connect-wallet-button\";\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n} from \"@/components/ui/card\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\n\n// Context\nimport { ModalContext } from \"@/components/providers/wallet-provider\";\n\nenum FeeSchedulerMode {\n  Linear = 0\n}\n\ninterface BuildCurveResult {\n  config: string;\n  signature: string;\n}\n\ntype FormValues = {\n  // Các tham số của buildCurveByMarketCapParam\n  totalTokenSupply: number;\n  initialMarketCap: number;\n  migrationMarketCap: number;\n  migrationOption: number;\n  tokenBaseDecimal: number;\n  tokenQuoteDecimal: number;\n  \n  // Tham số của feeSchedulerParam\n  numberOfPeriod: number;\n  reductionFactor: number;\n  periodFrequency: number;\n  feeSchedulerMode: number;\n  \n  // Các thông số khác\n  baseFeeBps: number;\n  dynamicFeeEnabled: boolean;\n  activationType: number;\n  collectFeeMode: number;\n  migrationFeeOption: number;\n  tokenType: number;\n  \n  // Phân phối LP\n  partnerLpPercentage: number;\n  creatorLpPercentage: number;\n  partnerLockedLpPercentage: number;\n  creatorLockedLpPercentage: number;\n  \n  // Địa chỉ\n  feeClaimer: string;\n  leftoverReceiver: string;\n  quoteMint: string;\n};\n\n// Create custom resolver for form\nconst customResolver = (data: any) => {\n  const errors: any = {};\n\n  // Validate totalTokenSupply\n  if (!data.totalTokenSupply) {\n    errors.totalTokenSupply = {\n      type: \"required\",\n      message: \"Tổng cung token là bắt buộc\",\n    };\n  } else if (data.totalTokenSupply <= 0) {\n    errors.totalTokenSupply = {\n      type: \"min\",\n      message: \"Tổng cung token phải lớn hơn 0\",\n    };\n  }\n\n  // Validate initialMarketCap\n  if (!data.initialMarketCap) {\n    errors.initialMarketCap = {\n      type: \"required\",\n      message: \"Vốn hóa thị trường ban đầu là bắt buộc\",\n    };\n  } else if (data.initialMarketCap <= 0) {\n    errors.initialMarketCap = {\n      type: \"min\",\n      message: \"Vốn hóa thị trường ban đầu phải lớn hơn 0\",\n    };\n  }\n\n  // Validate migrationMarketCap\n  if (!data.migrationMarketCap) {\n    errors.migrationMarketCap = {\n      type: \"required\",\n      message: \"Vốn hóa thị trường di chuyển là bắt buộc\",\n    };\n  } else if (data.migrationMarketCap <= 0) {\n    errors.migrationMarketCap = {\n      type: \"min\",\n      message: \"Vốn hóa thị trường di chuyển phải lớn hơn 0\",\n    };\n  }\n\n  // Validate tokenBaseDecimal\n  if (data.tokenBaseDecimal === undefined || data.tokenBaseDecimal === null) {\n    errors.tokenBaseDecimal = {\n      type: \"required\",\n      message: \"Số thập phân token gốc là bắt buộc\",\n    };\n  } else if (data.tokenBaseDecimal < 0 || data.tokenBaseDecimal > 18) {\n    errors.tokenBaseDecimal = {\n      type: \"range\",\n      message: \"Số thập phân token gốc phải từ 0 đến 18\",\n    };\n  }\n\n  // Validate tokenQuoteDecimal\n  if (data.tokenQuoteDecimal === undefined || data.tokenQuoteDecimal === null) {\n    errors.tokenQuoteDecimal = {\n      type: \"required\",\n      message: \"Số thập phân token báo giá là bắt buộc\",\n    };\n  } else if (data.tokenQuoteDecimal < 0 || data.tokenQuoteDecimal > 18) {\n    errors.tokenQuoteDecimal = {\n      type: \"range\",\n      message: \"Số thập phân token báo giá phải từ 0 đến 18\",\n    };\n  }\n\n  // Validate address fields\n  const validateAddress = (field: string, name: string) => {\n    if (!data[field]) {\n      errors[field] = {\n        type: \"required\",\n        message: `${name} là bắt buộc`,\n      };\n    } else {\n      try {\n        new PublicKey(data[field]);\n      } catch (e) {\n        errors[field] = {\n          type: \"invalid\",\n          message: \"Địa chỉ Solana không hợp lệ\",\n        };\n      }\n    }\n  };\n\n  validateAddress(\"feeClaimer\", \"Địa chỉ nhận phí\");\n  validateAddress(\"leftoverReceiver\", \"Địa chỉ nhận token còn lại\");\n  validateAddress(\"quoteMint\", \"Địa chỉ mint token báo giá\");\n\n  // Validate LP percentages\n  const validatePercentage = (field: string, name: string) => {\n    if (data[field] === undefined || data[field] === null || data[field] === \"\") {\n      errors[field] = {\n        type: \"required\",\n        message: `${name} là bắt buộc`,\n      };\n    } else if (Number(data[field]) < 0 || Number(data[field]) > 100) {\n      errors[field] = {\n        type: \"range\",\n        message: `${name} phải từ 0 đến 100%`,\n      };\n    }\n  };\n\n  validatePercentage(\"partnerLpPercentage\", \"Phần trăm LP của đối tác\");\n  validatePercentage(\"creatorLpPercentage\", \"Phần trăm LP của người tạo\");\n  validatePercentage(\"partnerLockedLpPercentage\", \"Phần trăm LP khóa của đối tác\");\n  validatePercentage(\"creatorLockedLpPercentage\", \"Phần trăm LP khóa của người tạo\");\n\n  // Validate that percentages sum to 100\n  const totalPercentage = Number(data.partnerLpPercentage || 0) + \n                         Number(data.creatorLpPercentage || 0) + \n                         Number(data.partnerLockedLpPercentage || 0) + \n                         Number(data.creatorLockedLpPercentage || 0);\n  \n  if (totalPercentage !== 100) {\n    errors.partnerLpPercentage = {\n      type: \"validate\",\n      message: \"Tổng phần trăm LP phải bằng 100%\",\n    };\n  }\n\n  return {\n    values: Object.keys(errors).length === 0 ? data : {},\n    errors,\n  };\n};\n\nexport default function BuildCurveAndCreateConfigByMarketCapForm({ onConfigCreated }: { onConfigCreated?: (configAddress: string) => void }) {\n  const { connection } = useConnection();\n  const { publicKey, connected, wallet } = useWallet();\n  const { switchToNextEndpoint, endpoint } = useContext(ModalContext);\n  \n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [result, setResult] = useState<BuildCurveResult | null>(null);\n  const [currentStage, setCurrentStage] = useState<'input' | 'confirming' | 'success' | 'error'>('input');\n  const [error, setError] = useState('');\n  const [mounted, setMounted] = useState(false);\n  const [network, setNetwork] = useState('devnet');\n\n  // Form setup with react-hook-form\n  const form = useForm<FormValues>({\n    defaultValues: {\n      totalTokenSupply: 1000000000,\n      initialMarketCap: 98,\n      migrationMarketCap: 3200,\n      migrationOption: 0,\n      tokenBaseDecimal: 9,\n      tokenQuoteDecimal: 9,\n      \n      numberOfPeriod: 0,\n      reductionFactor: 0,\n      periodFrequency: 0,\n      feeSchedulerMode: FeeSchedulerMode.Linear,\n      \n      baseFeeBps: 2500000,\n      dynamicFeeEnabled: false,\n      activationType: 0,\n      collectFeeMode: 0,\n      migrationFeeOption: 0,\n      tokenType: 0,\n      \n      partnerLpPercentage: 25,\n      creatorLpPercentage: 25,\n      partnerLockedLpPercentage: 25,\n      creatorLockedLpPercentage: 25,\n      \n      feeClaimer: \"\",\n      leftoverReceiver: \"\",\n      quoteMint: \"So11111111111111111111111111111111111111112\", // SOL by default\n    },\n    mode: \"onSubmit\",\n    resolver: customResolver,\n  });\n\n  // Chỉ render sau khi component được mount trên client\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  // Cập nhật trạng thái network khi endpoint thay đổi\n  useEffect(() => {\n    if (endpoint) {\n      setNetwork(endpoint.includes('devnet') ? 'devnet' : 'mainnet');\n    }\n  }, [endpoint]);\n\n  // Tự động điền địa chỉ ví khi ví kết nối\n  useEffect(() => {\n    if (connected && publicKey) {\n      form.setValue(\"feeClaimer\", publicKey.toString());\n      form.setValue(\"leftoverReceiver\", publicKey.toString());\n    }\n  }, [connected, publicKey, form]);\n\n  // Xử lý khi form được gửi đi\n  const onSubmit = async (values: FormValues) => {\n    if (!connected || !publicKey || !wallet) {\n      toast.error('Vui lòng kết nối ví của bạn');\n      return;\n    }\n\n    try {\n      setIsSubmitting(true);\n      setCurrentStage('confirming');\n      setError('');\n\n      toast.loading(\"Đang tạo cấu hình...\", {\n        id: \"build-curve-market-cap\"\n      });\n      \n      try {\n        // Khởi tạo DBC client\n        const client = new DynamicBondingCurveClient(connection);\n        \n        // Tạo keypair mới cho config\n        const configKeypair = Keypair.generate();\n        \n        // Tạo các tham số cho hàm buildCurveAndCreateConfigByMarketCap\n        const params = {\n          buildCurveByMarketCapParam: {\n            totalTokenSupply: values.totalTokenSupply,\n            initialMarketCap: values.initialMarketCap,\n            migrationMarketCap: values.migrationMarketCap,\n            migrationOption: values.migrationOption,\n            tokenBaseDecimal: values.tokenBaseDecimal,\n            tokenQuoteDecimal: values.tokenQuoteDecimal,\n            feeSchedulerParam: {\n              numberOfPeriod: values.numberOfPeriod,\n              reductionFactor: values.reductionFactor,\n              periodFrequency: values.periodFrequency,\n              feeSchedulerMode: values.feeSchedulerMode,\n            },\n            baseFeeBps: values.baseFeeBps,\n            dynamicFeeEnabled: values.dynamicFeeEnabled,\n            activationType: values.activationType,\n            collectFeeMode: values.collectFeeMode,\n            migrationFeeOption: values.migrationFeeOption,\n            tokenType: values.tokenType,\n            lockedVesting: {\n              amountPerPeriod: new BN('0'),\n              cliffDurationFromMigrationTime: new BN('0'),\n              frequency: new BN('0'),\n              numberOfPeriod: new BN('0'),\n              cliffUnlockAmount: new BN('0'),\n            },\n            partnerLpPercentage: values.partnerLpPercentage,\n            creatorLpPercentage: values.creatorLpPercentage,\n            partnerLockedLpPercentage: values.partnerLockedLpPercentage,\n            creatorLockedLpPercentage: values.creatorLockedLpPercentage,\n          },\n          feeClaimer: new PublicKey(values.feeClaimer),\n          leftoverReceiver: new PublicKey(values.leftoverReceiver),\n          payer: publicKey,\n          quoteMint: new PublicKey(values.quoteMint),\n          config: configKeypair.publicKey,\n        };\n        \n        // Tạo transaction\n        const transaction = await client.partners.buildCurveAndCreateConfigByMarketCap(\n            params\n        );\n        \n        // Lấy blockhash gần nhất\n        const { blockhash, lastValidBlockHeight } = await connection.getLatestBlockhash();\n        transaction.recentBlockhash = blockhash;\n        transaction.lastValidBlockHeight = lastValidBlockHeight;\n        \n        // Đặt feePayer cho transaction\n        transaction.feePayer = publicKey;\n        \n        // Ký giao dịch với configKeypair\n        transaction.partialSign(configKeypair);\n        \n        // Gửi và ký giao dịch\n        const signature = await wallet.adapter.sendTransaction(transaction, connection);\n        \n        // Đợi xác nhận\n        await connection.confirmTransaction({\n          blockhash,\n          lastValidBlockHeight,\n          signature\n        });\n        \n        // Lưu kết quả\n        const configAddress = configKeypair.publicKey.toString();\n        setResult({\n          config: configAddress,\n          signature: signature\n        });\n        \n        // Gọi callback nếu được cung cấp\n        if (onConfigCreated) {\n          onConfigCreated(configAddress);\n        }\n        \n        setCurrentStage('success');\n        \n        toast.success(\"Cấu hình đã được tạo thành công!\", {\n          id: \"build-curve-market-cap\",\n          description: `Config: ${configAddress.slice(0, 8)}...${configAddress.slice(-8)}`\n        });\n      } catch (transactionError: any) {\n        console.error(\"Lỗi giao dịch:\", transactionError);\n        throw transactionError;\n      }\n      \n    } catch (err: any) {\n      console.error(\"Lỗi khi tạo cấu hình:\", err);\n      \n      setCurrentStage('error');\n      setError(err.message || 'Đã xảy ra lỗi không xác định');\n      \n      // Kiểm tra nếu người dùng hủy/từ chối giao dịch\n      if (err.message && (err.message.includes(\"rejected\") || err.message.includes(\"canceled\"))) {\n        toast.error(\"Giao dịch đã bị hủy\", {\n          id: \"build-curve-market-cap\",\n          description: \"Bạn đã hủy giao dịch\"\n        });\n      } else {\n        toast.error(\"Không thể tạo cấu hình\", {\n          id: \"build-curve-market-cap\",\n          description: err.message\n        });\n        \n        // Nếu giao dịch thất bại do lỗi kết nối, thử chuyển sang RPC endpoint khác\n        if (err.message?.includes('failed to fetch') || \n            err.message?.includes('timeout') || \n            err.message?.includes('429') ||\n            err.message?.includes('503')) {\n          switchToNextEndpoint();\n        }\n      }\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  // Chức năng mở explorer để xem giao dịch\n  const viewExplorer = () => {\n    if (result?.signature) {\n      const baseUrl = network === 'devnet' ? 'https://explorer.solana.com/tx/' : 'https://solscan.io/tx/';\n      window.open(`${baseUrl}${result.signature}${network === 'devnet' ? '?cluster=devnet' : ''}`, '_blank');\n    }\n  };\n\n  // Chức năng mở explorer để xem cấu hình\n  const viewConfig = () => {\n    if (result?.config) {\n      const baseUrl = network === 'devnet' ? 'https://explorer.solana.com/address/' : 'https://solscan.io/account/';\n      window.open(`${baseUrl}${result.config}${network === 'devnet' ? '?cluster=devnet' : ''}`, '_blank');\n    }\n  };\n\n  // Reset form\n  const resetForm = () => {\n    form.reset();\n    setResult(null);\n    setCurrentStage('input');\n    setError('');\n  };\n\n  // Render form view\n  const renderForm = () => (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n        <div className=\"bg-secondary/50 rounded-lg p-4\">\n          <h3 className=\"font-medium mb-4\">Thông số thị trường</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <FormField\n              control={form.control}\n              name=\"totalTokenSupply\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Tổng cung token</FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"number\"\n                      placeholder=\"1000000000\"\n                      {...field}\n                      disabled={isSubmitting}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"initialMarketCap\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Vốn hóa ban đầu</FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"number\"\n                      placeholder=\"98\"\n                      {...field}\n                      disabled={isSubmitting}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"migrationMarketCap\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Vốn hóa di chuyển</FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"number\"\n                      placeholder=\"3200\"\n                      {...field}\n                      disabled={isSubmitting}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"migrationOption\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Tùy chọn di chuyển</FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"number\"\n                      placeholder=\"0\"\n                      {...field}\n                      disabled={isSubmitting}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"tokenBaseDecimal\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Số thập phân token cơ sở</FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"number\"\n                      placeholder=\"9\"\n                      {...field}\n                      disabled={isSubmitting}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"tokenQuoteDecimal\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Số thập phân token báo giá</FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"number\"\n                      placeholder=\"9\"\n                      {...field}\n                      disabled={isSubmitting}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </div>\n        </div>\n        \n        <div className=\"bg-secondary/50 rounded-lg p-4\">\n          <h3 className=\"font-medium mb-4\">Tham số phí</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <FormField\n              control={form.control}\n              name=\"baseFeeBps\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Phí cơ bản (BPS)</FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"number\"\n                      placeholder=\"2500000\"\n                      {...field}\n                      disabled={isSubmitting}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"dynamicFeeEnabled\"\n              render={({ field }) => (\n                <FormItem className=\"flex flex-row items-start space-x-3 space-y-0 rounded-md p-4\">\n                  <FormControl>\n                    <input\n                      type=\"checkbox\"\n                      className=\"h-4 w-4 mt-1\"\n                      checked={field.value}\n                      onChange={field.onChange}\n                      disabled={isSubmitting}\n                    />\n                  </FormControl>\n                  <div className=\"space-y-1 leading-none\">\n                    <FormLabel>\n                      Bật phí động\n                    </FormLabel>\n                  </div>\n                </FormItem>\n              )}\n            />\n          </div>\n        </div>\n        \n        <div className=\"bg-secondary/50 rounded-lg p-4 space-y-4\">\n          <div className=\"font-medium\">Phân phối LP</div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <FormField\n              control={form.control}\n              name=\"partnerLpPercentage\"\n              render={({ field }) => (\n                <FormItem>\n                  <div className=\"flex justify-between items-center\">\n                    <FormLabel>Đối tác LP %</FormLabel>\n                  </div>\n                  <FormControl>\n                    <Input\n                      type=\"number\"\n                      placeholder=\"25\"\n                      min=\"0\"\n                      max=\"100\"\n                      {...field}\n                      disabled={isSubmitting}\n                      className=\"bg-transparent text-sm h-8\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"creatorLpPercentage\"\n              render={({ field }) => (\n                <FormItem>\n                  <div className=\"flex justify-between items-center\">\n                    <FormLabel>Người tạo LP %</FormLabel>\n                  </div>\n                  <FormControl>\n                    <Input\n                      type=\"number\"\n                      placeholder=\"25\"\n                      min=\"0\"\n                      max=\"100\"\n                      {...field}\n                      disabled={isSubmitting}\n                      className=\"bg-transparent text-sm h-8\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"partnerLockedLpPercentage\"\n              render={({ field }) => (\n                <FormItem>\n                  <div className=\"flex justify-between items-center\">\n                    <FormLabel>Đối tác LP khóa %</FormLabel>\n                  </div>\n                  <FormControl>\n                    <Input\n                      type=\"number\"\n                      placeholder=\"25\"\n                      min=\"0\"\n                      max=\"100\"\n                      {...field}\n                      disabled={isSubmitting}\n                      className=\"bg-transparent text-sm h-8\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"creatorLockedLpPercentage\"\n              render={({ field }) => (\n                <FormItem>\n                  <div className=\"flex justify-between items-center\">\n                    <FormLabel>Người tạo LP khóa %</FormLabel>\n                  </div>\n                  <FormControl>\n                    <Input\n                      type=\"number\"\n                      placeholder=\"25\"\n                      min=\"0\"\n                      max=\"100\"\n                      {...field}\n                      disabled={isSubmitting}\n                      className=\"bg-transparent text-sm h-8\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </div>\n          \n          <p className=\"text-xs text-muted-foreground\">\n            Tổng phần trăm LP phải bằng 100%. Các tỷ lệ này xác định cách phân phối token LP.\n          </p>\n        </div>\n        \n        <div className=\"bg-secondary/50 rounded-lg p-4\">\n          <h3 className=\"font-medium mb-4\">Địa chỉ</h3>\n          <div className=\"grid grid-cols-1 gap-4\">\n            <FormField\n              control={form.control}\n              name=\"feeClaimer\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Địa chỉ nhận phí</FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder=\"Nhập địa chỉ ví nhận phí\"\n                      {...field}\n                      disabled={isSubmitting}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"leftoverReceiver\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Địa chỉ nhận token còn lại</FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder=\"Nhập địa chỉ ví nhận token còn lại\"\n                      {...field}\n                      disabled={isSubmitting}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"quoteMint\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Địa chỉ token báo giá</FormLabel>\n                  <FormControl>\n                    <Select\n                      onValueChange={field.onChange}\n                      defaultValue={field.value}\n                      disabled={isSubmitting}\n                    >\n                      <SelectTrigger className=\"w-full\">\n                        <SelectValue placeholder=\"Chọn token báo giá\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"So11111111111111111111111111111111111111112\">\n                          <div className=\"flex items-center\">\n                            <img \n                              src=\"/crypto-logos/solana-logo.svg\" \n                              alt=\"SOL\" \n                              className=\"w-5 h-5 mr-2 rounded-full\"\n                            />\n                            SOL\n                          </div>\n                        </SelectItem>\n                        <SelectItem value=\"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\">\n                          <div className=\"flex items-center\">\n                            <img \n                              src=\"/crypto-logos/usd-coin-usdc-logo.svg\" \n                              alt=\"USDC\" \n                              className=\"w-5 h-5 mr-2 rounded-full\"\n                            />\n                            USDC\n                          </div>\n                        </SelectItem>\n                        <SelectItem value=\"Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB\">\n                          <div className=\"flex items-center\">\n                            <img \n                              src=\"/crypto-logos/tether-usdt-logo.svg\" \n                              alt=\"USDT\" \n                              className=\"w-5 h-5 mr-2 rounded-full\"\n                            />\n                            USDT\n                          </div>\n                        </SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </div>\n        </div>\n        \n        <div className=\"space-y-4\">\n          <div className=\"bg-secondary/50 rounded-lg p-4 space-y-2\">\n            <div className=\"flex justify-between items-center text-sm\">\n              <span>Mạng</span>\n              <Badge variant={network === 'mainnet' ? \"default\" : \"secondary\"}>\n                {network}\n              </Badge>\n            </div>\n          </div>\n          \n          <div className=\"pt-2\">\n            {!connected ? (\n              <ConnectWalletButton className=\"w-full\" />\n            ) : (\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={isSubmitting}\n              >\n                {isSubmitting ? (\n                  <>\n                    <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\n                    Đang tạo...\n                  </>\n                ) : \"Tạo cấu hình theo vốn hóa\"}\n              </Button>\n            )}\n          </div>\n        </div>\n      </form>\n    </Form>\n  );\n\n  // Render success view\n  const renderSuccess = () => (\n    <div className=\"space-y-4 p-4\">\n      <div className=\"mx-auto flex h-20 w-20 items-center justify-center rounded-full bg-green-100\">\n        <CheckCircle className=\"h-10 w-10 text-green-600\" />\n      </div>\n      <h3 className=\"text-xl font-bold text-center\">Đã tạo cấu hình!</h3>\n      \n      <div className=\"space-y-2\">\n        <div className=\"text-sm text-muted-foreground\">Địa chỉ cấu hình:</div>\n        <div className=\"bg-secondary/60 rounded p-2 text-sm font-mono break-all\">\n          {result?.config}\n        </div>\n      </div>\n      \n      <div className=\"space-y-2\">\n        <div className=\"text-sm text-muted-foreground\">Chữ ký giao dịch:</div>\n        <div className=\"bg-secondary/60 rounded p-2 text-sm font-mono break-all\">\n          {result?.signature}\n        </div>\n      </div>\n      \n      <div className=\"flex gap-2 mt-4\">\n        <Button \n          variant=\"outline\" \n          onClick={viewConfig}\n          className=\"flex-1\"\n        >\n          <ExternalLink className=\"h-4 w-4 mr-2\" />\n          Xem cấu hình\n        </Button>\n        \n        <Button \n          variant=\"outline\" \n          onClick={viewExplorer}\n          className=\"flex-1\"\n        >\n          <ExternalLink className=\"h-4 w-4 mr-2\" />\n          Xem giao dịch\n        </Button>\n      </div>\n      \n      <Button \n        onClick={resetForm}\n        className=\"w-full\"\n      >\n        Tạo cấu hình mới\n      </Button>\n    </div>\n  );\n\n  // Render error view\n  const renderError = () => (\n    <div className=\"space-y-4 p-4 text-center\">\n      <div className=\"mx-auto flex h-20 w-20 items-center justify-center rounded-full bg-red-100\">\n        <svg className=\"h-10 w-10 text-red-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n        </svg>\n      </div>\n      <h3 className=\"text-xl font-bold\">Tạo cấu hình thất bại</h3>\n      <p className=\"text-muted-foreground\">{error || 'Đã xảy ra lỗi trong quá trình tạo cấu hình.'}</p>\n      <Button \n        onClick={() => {\n          setCurrentStage('input');\n        }}\n        className=\"w-full\"\n      >\n        Thử lại\n      </Button>\n    </div>\n  );\n\n  // Render confirmation view\n  const renderConfirming = () => (\n    <div className=\"space-y-4 p-4 text-center\">\n      <div className=\"mx-auto flex h-20 w-20 items-center justify-center\">\n        <Loader2 className=\"h-10 w-10 animate-spin\" />\n      </div>\n      <h3 className=\"text-xl font-bold\">Đang xác nhận</h3>\n      <p className=\"text-muted-foreground\">Vui lòng đợi trong khi giao dịch của bạn đang được xử lý...</p>\n    </div>\n  );\n\n  // Render dựa trên stage hiện tại\n  const renderStageContent = () => {\n    switch (currentStage) {\n      case 'success':\n        return renderSuccess();\n      case 'error':\n        return renderError();\n      case 'confirming':\n        return renderConfirming();\n      default:\n        return renderForm();\n    }\n  };\n\n  // Tránh lỗi hydration\n  if (!mounted) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Tạo cấu hình theo vốn hóa thị trường</CardTitle>\n          <CardDescription>Xây dựng cấu hình sản phẩm không đổi dựa trên vốn hóa thị trường</CardDescription>\n        </CardHeader>\n        <CardContent className=\"flex items-center justify-center p-6\">\n          <div className=\"flex flex-col items-center gap-2\">\n            <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n            <p className=\"text-sm text-muted-foreground\">Đang tải...</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between\">\n          <span>Tạo cấu hình theo vốn hóa thị trường</span>\n          {connected && publicKey && (\n            <Badge variant=\"outline\" className=\"ml-2\">\n              {publicKey.toString().slice(0, 4)}...{publicKey.toString().slice(-4)}\n            </Badge>\n          )}\n        </CardTitle>\n        <CardDescription>Xây dựng cấu hình sản phẩm không đổi dựa trên vốn hóa thị trường</CardDescription>\n      </CardHeader>\n      <CardContent>\n        {renderStageContent()}\n      </CardContent>\n    </Card>\n  );\n}",
      "type": "registry:component",
      "target": "components/ui/murphis/buildCurveAndCreateConfigByMarketCap-form.tsx"
    },
    {
      "path": "hook/murphis/use-walletModal.ts",
      "content": "import { createContext, useContext } from 'react';\n\nexport interface WalletModalContextState {\n    visible: boolean;\n    setVisible: (open: boolean) => void;\n}\n\nconst DEFAULT_CONTEXT = {\n    setVisible(_open: boolean) {\n        console.error(constructMissingProviderErrorMessage('call', 'setVisible'));\n    },\n    visible: false,\n};\nObject.defineProperty(DEFAULT_CONTEXT, 'visible', {\n    get() {\n        console.error(constructMissingProviderErrorMessage('read', 'visible'));\n        return false;\n    },\n});\n\nfunction constructMissingProviderErrorMessage(action: string, valueName: string) {\n    return (\n        'You have tried to ' +\n        ` ${action} \"${valueName}\"` +\n        ' on a WalletModalContext without providing one.' +\n        ' Make sure to render a WalletModalProvider' +\n        ' as an ancestor of the component that uses ' +\n        'WalletModalContext'\n    );\n}\n\nexport const WalletModalContext = createContext<WalletModalContextState>(DEFAULT_CONTEXT as WalletModalContextState);\n\nexport function useWalletModal(): WalletModalContextState {\n    return useContext(WalletModalContext);\n}\n",
      "type": "registry:hook",
      "target": "hook/murphis/use-walletModal.ts"
    },
    {
      "path": "hook/murphis/use-walletModal.ts",
      "content": "import { createContext, useContext } from 'react';\n\nexport interface WalletModalContextState {\n    visible: boolean;\n    setVisible: (open: boolean) => void;\n}\n\nconst DEFAULT_CONTEXT = {\n    setVisible(_open: boolean) {\n        console.error(constructMissingProviderErrorMessage('call', 'setVisible'));\n    },\n    visible: false,\n};\nObject.defineProperty(DEFAULT_CONTEXT, 'visible', {\n    get() {\n        console.error(constructMissingProviderErrorMessage('read', 'visible'));\n        return false;\n    },\n});\n\nfunction constructMissingProviderErrorMessage(action: string, valueName: string) {\n    return (\n        'You have tried to ' +\n        ` ${action} \"${valueName}\"` +\n        ' on a WalletModalContext without providing one.' +\n        ' Make sure to render a WalletModalProvider' +\n        ' as an ancestor of the component that uses ' +\n        'WalletModalContext'\n    );\n}\n\nexport const WalletModalContext = createContext<WalletModalContextState>(DEFAULT_CONTEXT as WalletModalContextState);\n\nexport function useWalletModal(): WalletModalContextState {\n    return useContext(WalletModalContext);\n}\n",
      "type": "registry:hook",
      "target": "hook/murphis/use-walletModal.ts"
    }
  ]
}
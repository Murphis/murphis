{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "token-combobox",
  "type": "registry:block",
  "title": "Token Combobox",
  "description": "A searchable combobox of tokens and prices with optional user balances.",
  "dependencies": [
    "@solana/web3.js",
    "@solana/wallet-adapter-react"
  ],
  "registryDependencies": [
    "command",
    "popover",
    "button"
  ],
  "files": [
    {
      "path": "components/ui/murphy/token-combobox.tsx",
      "content": "\"use client\";\nimport React, { useEffect, useState } from \"react\";\nimport { ChevronsUpDownIcon } from \"lucide-react\";\nimport { Button } from \"../button\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/components/ui/command\";\nimport { SolAsset } from \"@/types/assets\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { TokenIcon } from \"./token-icon\";\nimport { fetchWalletAssets } from \"@/lib/assets/birdeye/wallets\";\nimport { useWallet } from \"@solana/wallet-adapter-react\";\n\ntype TokenComboboxProps = {\n  assets?: SolAsset[];\n  trigger?: React.ReactNode;\n  address?: PublicKey | null;\n  showBalances?: boolean;\n  onSelect?: (token: SolAsset) => void;\n  onSearch?: ({\n    query,\n    owner,\n  }: {\n    query: string;\n    owner?: PublicKey;\n  }) => Promise<SolAsset[]>;\n};\n\nexport function TokenCombobox({\n  assets: initialAssets,\n  trigger,\n  address,\n  showBalances = true,\n  onSelect,\n  onSearch,\n}: TokenComboboxProps) {\n  const { publicKey } = useWallet();\n  const [open, setOpen] = React.useState(false);\n  const [assets, setAssets] = React.useState<SolAsset[]>(initialAssets || []);\n  const [value, setValue] = React.useState(\"\");\n  const [searchValue, setSearchValue] = React.useState(\"\");\n  const [isLoading, setLoading] = useState(false);\n  const selectedAsset = React.useMemo(\n    () => assets.find((asset) => asset.mint.toBase58().toLowerCase() === value),\n    [assets, value],\n  );\n\n  const fetchData = async () => {\n    if (!publicKey) return;\n    try {\n      setLoading(true);\n\n      const fetchedAssets = await fetchWalletAssets({\n        owner: publicKey,\n      });\n      setAssets(fetchedAssets);\n    } finally {\n      setLoading(false);\n    }\n  }\n  // In case assets array not provided -> fetch from user wallet\n  useEffect(() => {\n    if (assets.length == 0) {\n      fetchData()\n    }\n  }, []);\n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        {trigger || (\n          <Button\n            variant=\"outline\"\n            role=\"combobox\"\n            size=\"lg\"\n            aria-expanded={open}\n            className=\"h-12 w-[300px] justify-start gap-2.5 px-3 font-medium\"\n          >\n            {selectedAsset ? (\n              <>\n                <TokenIcon asset={selectedAsset} />\n                {selectedAsset.symbol}\n              </>\n            ) : (\n              \"Select token...\"\n            )}\n            <ChevronsUpDownIcon size={16} className=\"ml-auto opacity-50\" />\n          </Button>\n        )}\n      </PopoverTrigger>\n      <PopoverContent className=\"w-[300px] p-0\">\n        <Command shouldFilter={false}>\n          <CommandInput\n            placeholder=\"Search tokens...\"\n            onValueChange={setSearchValue}\n          />\n          <CommandList>\n            {assets.length === 0 && (\n              <CommandEmpty>\n                {searchValue ? \"No tokens found.\" : \"Loading...\"}\n              </CommandEmpty>\n            )}\n            <CommandGroup>\n              {assets.map((asset) => (\n                <CommandItem\n                  key={asset.mint.toBase58()}\n                  value={asset.mint.toBase58().toLowerCase()}\n                  onSelect={(currentValue) => {\n                    setValue(currentValue === value ? \"\" : currentValue);\n                    setOpen(false);\n                    if (onSelect) onSelect(asset);\n                  }}\n                  className=\"flex items-center gap-2\"\n                >\n                  <TokenIcon asset={asset} />\n                  {asset.symbol}\n                </CommandItem>\n              ))}\n            </CommandGroup>\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/ui/murphy/token-combobox.tsx"
    },
    {
      "path": "lib/assets/birdeye/wallets.ts",
      "content": "import { PublicKey } from \"@solana/web3.js\";\nimport { SolAsset, FetchWalletArgs } from \"@/types/assets\";\n\n/* fetch all token addresses of a wallet using bird eye */\nconst fetchWalletAssets = async ({\n  owner,\n  limit = 20,\n}: FetchWalletArgs): Promise<SolAsset[]> => {\n  const headers = {\n    \"x-api-key\": process.env.NEXT_PUBLIC_BIRDEYE_API_KEY!,\n    accept: \"application/json\",\n    \"x-chain\": \"solana\",\n  };\n\n  try {\n    const response = await fetch(\n      `https://public-api.birdeye.so/v1/wallet/token_list?wallet=${owner.toString()}`,\n      { headers },\n    );\n\n    const { success, data } = await response.json();\n\n    if (!success || !data?.items) {\n      return [];\n    }\n\n    const items = data.items\n      .filter((item: { symbol: string }) => item.symbol)\n      .map(\n        (item: {\n          address: string;\n          name: string;\n          symbol: string;\n          icon: string;\n          logoURI: string;\n          priceUsd: number;\n          decimals: number;\n          uiAmount: number;\n        }) => ({\n          mint: new PublicKey(item.address),\n          name: item.name,\n          symbol: item.symbol,\n          image: item.icon || item.logoURI,\n          price: item.priceUsd,\n          decimals: item.decimals,\n          userTokenAccount: {\n            address: owner,\n            amount: item.uiAmount,\n          },\n        }),\n      );\n\n    return items\n      .sort((a: SolAsset, b: SolAsset) => {\n        const aValue = (a.userTokenAccount?.amount || 0) * (a.price || 0);\n        const bValue = (b.userTokenAccount?.amount || 0) * (b.price || 0);\n        return bValue - aValue;\n      })\n      .slice(0, limit);\n  } catch (error) {\n    console.error(\"Error fetching wallet assets:\", error);\n    return [];\n  }\n};\n\nexport { fetchWalletAssets };\n",
      "type": "registry:file",
      "target": "lib/assets/birdeye/wallets.ts"
    },
    {
      "path": "types/assets/index.ts",
      "content": "import { PublicKey,Connection } from \"@solana/web3.js\";\n\nexport type SolAsset = {\n  mint: PublicKey;\n  name: string;\n  symbol: string;\n  image: string;\n  decimals: number;\n  price: number;\n  userTokenAccount?: {\n    address: PublicKey;\n    amount: number;\n  };\n};\n\nexport type FetchWalletArgs = {\n  owner: PublicKey;\n  limit?: number;\n};",
      "type": "registry:file",
      "target": "types/assets/index.ts"
    }
  ]
}
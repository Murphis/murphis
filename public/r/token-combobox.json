{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "token-combobox",
  "type": "registry:block",
  "title": "Token Combobox",
  "description": "A searchable combobox of tokens and prices with optional user balances.",
  "dependencies": [
    "@solana/web3.js"
  ],
  "registryDependencies": [
    "command",
    "popover",
    "button"
  ],
  "files": [
    {
      "path": "components/ui/murphy/token-combobox.tsx",
      "content": "\"use client\";\nimport React from \"react\";\nimport { ChevronsUpDownIcon } from \"lucide-react\";\nimport { Button } from \"../button\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/components/ui/command\";\nimport { SolAsset } from \"@/types/swap\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { TokenIcon } from \"./token-icon\";\n\ntype TokenComboboxProps = {\n  assets: SolAsset[];\n  trigger?: React.ReactNode;\n  address?: PublicKey | null;\n  showBalances?: boolean;\n  onSelect?: (token: SolAsset) => void;\n  onSearch?: ({\n    query,\n    owner,\n  }: {\n    query: string;\n    owner?: PublicKey;\n  }) => Promise<SolAsset[]>;\n};\n\nexport function TokenCombobox({\n  assets: initialAssets,\n  trigger,\n  address,\n  showBalances = true,\n  onSelect,\n  onSearch,\n}: TokenComboboxProps) {\n  const [open, setOpen] = React.useState(false);\n  const [assets, setAssets] = React.useState<SolAsset[]>(initialAssets);\n  const [value, setValue] = React.useState(\"\");\n  const [searchValue, setSearchValue] = React.useState(\"\");\n\n  const selectedAsset = React.useMemo(\n    () => assets.find((asset) => asset.mint.toBase58().toLowerCase() === value),\n    [assets, value],\n  );\n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        {trigger || (\n          <Button\n            variant=\"outline\"\n            role=\"combobox\"\n            size=\"lg\"\n            aria-expanded={open}\n            className=\"h-12 w-[300px] justify-start gap-2.5 px-3 font-medium\"\n          >\n            {selectedAsset ? (\n              <>\n                <TokenIcon asset={selectedAsset} />\n                {selectedAsset.symbol}\n              </>\n            ) : (\n              \"Select token...\"\n            )}\n            <ChevronsUpDownIcon size={16} className=\"ml-auto opacity-50\" />\n          </Button>\n        )}\n      </PopoverTrigger>\n      <PopoverContent className=\"w-[300px] p-0\">\n        <Command shouldFilter={false}>\n          <CommandInput\n            placeholder=\"Search tokens...\"\n            onValueChange={setSearchValue}\n          />\n          <CommandList>\n            {assets.length === 0 && (\n              <CommandEmpty>\n                {searchValue ? \"No tokens found.\" : \"Loading...\"}\n              </CommandEmpty>\n            )}\n            <CommandGroup>\n              {assets.map((asset) => (\n                <CommandItem\n                  key={asset.mint.toBase58()}\n                  value={asset.mint.toBase58().toLowerCase()}\n                  onSelect={(currentValue) => {\n                    setValue(currentValue === value ? \"\" : currentValue);\n                    setOpen(false);\n                    if (onSelect) onSelect(asset);\n                  }}\n                  className=\"flex items-center gap-2\"\n                >\n                  <TokenIcon asset={asset} />\n                  {asset.symbol}\n                </CommandItem>\n              ))}\n            </CommandGroup>\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/ui/murphy/token-combobox.tsx"
    },
    {
      "path": "components/ui/murphy/token-icon.tsx",
      "content": "\"use client\";\n\nimport React from \"react\";\n\nimport { SolAsset } from \"@/types/swap\";\n\ntype IconProps = {\n  asset: SolAsset | null;\n  size?: number;\n};\n\nconst TokenIcon = ({ asset, size = 24 }: IconProps) => {\n  return (\n    <div\n      className=\"relative shrink-0 rounded-full border border-border bg-background p-0\"\n      style={{\n        width: size + 2,\n        height: size + 2,\n      }}\n    >\n      <img\n        src=\"/token-icons/placeholder.jpg\"\n        alt={asset?.symbol ?? asset?.mint.toBase58() ?? \"\"}\n        width={size}\n        height={size}\n        className=\"absolute inset-0 rounded-full mt-0\"\n      />\n      <img\n        src={asset?.image ?? \"\"}\n        alt={asset?.symbol ?? asset?.mint.toBase58() ?? \"\"}\n        width={size}\n        height={size}\n        className=\"absolute inset-0 rounded-full mt-0\"\n        style={{\n          width: size,\n          height: size,\n        }}\n      />\n    </div>\n  );\n};\n\nexport { TokenIcon };",
      "type": "registry:component",
      "target": "components/ui/murphy/token-icon.tsx"
    },
    {
      "path": "types/swap/index.ts",
      "content": "import { PublicKey, Connection } from \"@solana/web3.js\";\n\nexport interface Config {\n    JUPITER_REFERRAL_ACCOUNT?: string;\n    JUPITER_FEE_BPS?: number;\n}\n  \ndeclare const _default: {\n    Config: Config;\n};\n\nexport type SolAsset = {\n  mint: PublicKey;\n  name: string;\n  symbol: string;\n  image: string;\n  decimals: number;\n  price: number;\n  userTokenAccount?: {\n    address: PublicKey;\n    amount: number;\n  };\n};\n\nexport default _default; ",
      "type": "registry:file",
      "target": "types/swap/index.ts"
    }
  ]
}
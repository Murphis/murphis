{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "mint-cToken",
  "type": "registry:block",
  "title": "Mint cToken",
  "description": "A simple mint cToken form component.",
  "dependencies": [
    "@solana/web3.js",
    "@solana/spl-token",
    "@solana/wallet-adapter-react",
    "@lightprotocol/stateless.js",
    "@lightprotocol/compressed-token"
  ],
  "registryDependencies": [
    "input",
    "button",
    "form",
    "card",
    "sonner",
    "select",
    "dialog",
    "dropdown-menu"
  ],
  "files": [
    {
      "path": "components/ui/murphy/mint-cToken.tsx",
      "content": "\"use client\";\n\nimport { useState, useEffect, useMemo } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { toast } from \"sonner\";\nimport { Loader2, Wallet } from \"lucide-react\";\nimport {\n  PublicKey,\n  Keypair,\n  Signer,\n} from \"@solana/web3.js\";\nimport { useWallet, useConnection } from \"@solana/wallet-adapter-react\";\nimport {\n  createMint,\n  getOrCreateAssociatedTokenAccount,\n  mintTo,\n} from \"@solana/spl-token\";\nimport { createTokenPool } from '@lightprotocol/compressed-token';\nimport { createRpc } from '@lightprotocol/stateless.js';\nimport bs58 from \"bs58\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { ConnectWalletButton } from \"./connect-wallet-button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n\n// Type for mint form values\ntype MintFormValues = {\n  tokenName: string;\n  tokenSymbol: string;\n  decimals: number;\n  supply: number;\n};\n\n// Create custom resolver for form\nconst customResolver = (data: any) => {\n  const errors: any = {};\n\n  // Validate token name\n  if (!data.tokenName) {\n    errors.tokenName = {\n      type: \"required\",\n      message: \"Token name is required\",\n    };\n  }\n\n  // Validate token symbol\n  if (!data.tokenSymbol) {\n    errors.tokenSymbol = {\n      type: \"required\",\n      message: \"Token symbol is required\",\n    };\n  }\n\n  // Validate decimals\n  if (data.decimals === undefined || data.decimals === null || data.decimals === \"\") {\n    errors.decimals = {\n      type: \"required\",\n      message: \"Decimals is required\",\n    };\n  } else if (Number(data.decimals) < 0 || Number(data.decimals) > 9) {\n    errors.decimals = {\n      type: \"range\",\n      message: \"Decimals must be between 0 and 9\",\n    };\n  }\n\n  // Validate supply\n  if (data.supply === undefined || data.supply === null || data.supply === \"\") {\n    errors.supply = {\n      type: \"required\",\n      message: \"Supply is required\",\n    };\n  } else if (Number(data.supply) <= 0) {\n    errors.supply = {\n      type: \"min\",\n      message: \"Supply must be greater than 0\",\n    };\n  }\n\n  return {\n    values: Object.keys(errors).length === 0 ? data : {},\n    errors,\n  };\n};\n\nexport function MintTokenForm({ className }: { className?: string }) {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [currentStage, setCurrentStage] = useState('input'); // input, confirming, success, error\n  const [error, setError] = useState('');\n  const [transactionSignature, setTransactionSignature] = useState('');\n  \n  const { publicKey, connected, wallet } = useWallet();\n  const { connection } = useConnection();\n\n  // Form setup with react-hook-form\n  const form = useForm<MintFormValues>({\n    defaultValues: {\n      tokenName: \"\",\n      tokenSymbol: \"\",\n      decimals: 9,\n      supply: 1000000000, // 1 billion default\n    },\n    mode: \"onSubmit\",\n    resolver: customResolver,\n  });\n\n  // Handle form submission\n  const onSubmit = async (values: MintFormValues) => {\n    if (!connected || !publicKey) {\n      toast.error(\"Wallet not connected\");\n      return;\n    }\n\n    if (!wallet) {\n      toast.error(\"Wallet not available\");\n      return;\n    }\n\n    // Ép kiểu wallet thành Signer\n    const signer = wallet as unknown as Signer;\n\n    try {\n      setIsSubmitting(true);\n      setError('');\n      setCurrentStage('confirming');\n\n      // Create RPC connection\n      const rpcConnection = createRpc(connection.rpcEndpoint);\n\n      // Create mint\n      const mint = await createMint(\n        rpcConnection,\n        signer,\n        publicKey,\n        null,\n        values.decimals\n      );\n\n      // Register mint for compression\n      const poolTxId = await createTokenPool(rpcConnection, signer, mint);\n      \n      // Create associated token account\n      const ata = await getOrCreateAssociatedTokenAccount(\n        rpcConnection,\n        signer,\n        mint,\n        publicKey\n      );\n\n      // Mint tokens\n      const mintToTxId = await mintTo(\n        rpcConnection,\n        signer,\n        mint,\n        ata.address,\n        publicKey,\n        values.supply * Math.pow(10, values.decimals)\n      );\n\n      setTransactionSignature(mintToTxId);\n      setCurrentStage('success');\n      \n      toast.success(\"Token created successfully!\", {\n        description: `Transaction: ${mintToTxId}`\n      });\n\n      // Reset form\n      form.reset();\n\n    } catch (error: any) {\n      console.error('Minting error:', error);\n      setError(`Token creation failed: ${error.message}`);\n      toast.error(\"Transaction failed\", {\n        description: error.message || \"Unable to create token\"\n      });\n      setCurrentStage('error');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  // Render success view\n  const renderSuccess = () => (\n    <div className=\"space-y-4 p-4 text-center\">\n      <div className=\"mx-auto flex h-20 w-20 items-center justify-center rounded-full bg-green-100\">\n        <svg className=\"h-10 w-10 text-green-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n        </svg>\n      </div>\n      <h3 className=\"text-xl font-bold\">Token Created Successfully!</h3>\n      <p className=\"text-muted-foreground\">Your compressed token has been created.</p>\n      {transactionSignature && (\n        <a \n          href={`https://explorer.solana.com/tx/${transactionSignature}`} \n          target=\"_blank\" \n          rel=\"noopener noreferrer\"\n          className=\"text-primary hover:underline\"\n        >\n          View transaction\n        </a>\n      )}\n      <Button \n        onClick={() => {\n          setCurrentStage('input');\n          form.reset();\n        }}\n        className=\"w-full\"\n      >\n        Create Another Token\n      </Button>\n    </div>\n  );\n\n  // Render error view\n  const renderError = () => (\n    <div className=\"space-y-4 p-4 text-center\">\n      <div className=\"mx-auto flex h-20 w-20 items-center justify-center rounded-full bg-red-100\">\n        <svg className=\"h-10 w-10 text-red-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n        </svg>\n      </div>\n      <h3 className=\"text-xl font-bold\">Token Creation Failed</h3>\n      <p className=\"text-muted-foreground\">{error || 'An error occurred while creating your token.'}</p>\n      <Button \n        onClick={() => {\n          setCurrentStage('input');\n        }}\n        className=\"w-full\"\n      >\n        Try Again\n      </Button>\n    </div>\n  );\n\n  // Render confirmation view\n  const renderConfirming = () => (\n    <div className=\"space-y-4 p-4 text-center\">\n      <div className=\"mx-auto flex h-20 w-20 items-center\">\n        <Loader2 className=\"h-10 w-10 animate-spin\" />\n      </div>\n      <h3 className=\"text-xl font-bold\">Creating Token</h3>\n      <p className=\"text-muted-foreground\">Please wait while your token is being created...</p>\n    </div>\n  );\n\n  // Render input form\n  const renderInputForm = () => (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n        <FormField\n          control={form.control}\n          name=\"tokenName\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Token Name</FormLabel>\n              <FormControl>\n                <Input placeholder=\"My Token\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"tokenSymbol\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Token Symbol</FormLabel>\n              <FormControl>\n                <Input placeholder=\"MTK\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"decimals\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Decimals</FormLabel>\n              <FormControl>\n                <Input \n                  type=\"number\" \n                  min={0} \n                  max={9} \n                  {...field} \n                  onChange={(e) => field.onChange(Number(e.target.value))}\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"supply\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Initial Supply</FormLabel>\n              <FormControl>\n                <Input \n                  type=\"number\" \n                  min={1} \n                  {...field} \n                  onChange={(e) => field.onChange(Number(e.target.value))}\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <div className=\"pt-2\">\n          {!connected ? (\n            <ConnectWalletButton className=\"w-full\" />\n          ) : (\n            <Button\n              type=\"submit\"\n              className=\"w-full\"\n              disabled={isSubmitting}\n            >\n              {isSubmitting ? (\n                <>\n                  <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\n                  Creating Token...\n                </>\n              ) : (\n                \"Create Token\"\n              )}\n            </Button>\n          )}\n        </div>\n      </form>\n    </Form>\n  );\n\n  // Render based on current stage\n  const renderStageContent = () => {\n    switch (currentStage) {\n      case 'success':\n        return renderSuccess();\n      case 'error':\n        return renderError();\n      case 'confirming':\n        return renderConfirming();\n      default:\n        return renderInputForm();\n    }\n  };\n\n  return (\n    <Card className={className}>\n      <CardHeader>\n        <CardTitle className=\"flex items-center\">\n          <Wallet className=\"h-5 w-5 mr-2\" />\n          Create Compressed Token\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        {renderStageContent()}\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default MintTokenForm;",
      "type": "registry:component",
      "target": "components/ui/murphy/mint-cToken.tsx"
    }
  ]
}
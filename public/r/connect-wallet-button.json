{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "connect-wallet-button",
  "type": "registry:block",
  "title": "Connect Wallet Button",
  "description": "A simple connect wallet button component.",
  "dependencies": [
    "@solana/wallet-adapter-react",
    "@solana/wallet-adapter-base"
  ],
  "registryDependencies": [
    "button",
    "dialog",
    "collapsible",
    "dropdown-menu"
  ],
  "files": [
    {
      "path": "components/ui/murphy/connect-wallet-button.tsx",
      "content": "\"use client\"\n\nimport React, { type FC, useCallback, useEffect, useMemo, useState } from \"react\"\nimport { useWallet } from \"@solana/wallet-adapter-react\"\nimport { WalletName, WalletReadyState } from \"@solana/wallet-adapter-base\"\nimport { useWalletMultiButton } from \"@/hook/murphy/use-walletMultiButton\"\nimport { Button } from \"../button\"\nimport { ModalContext } from \"@/components/providers/wallet-provider\"\n\nimport { Dialog, DialogClose, DialogContent, DialogHeader, DialogTitle } from \"../dialog\"\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from \"../collapsible\"\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"../dropdown-menu\"\n\n// ----- Label Constants -----\nconst LABELS = {\n  \"change-wallet\": \"Change wallet\",\n  connecting: \"Connecting ...\",\n  \"copy-address\": \"Copy address\",\n  copied: \"Copied\",\n  disconnect: \"Disconnect\",\n  \"has-wallet\": \"Connect Wallet\",\n  \"no-wallet\": \"Select Wallet\",\n} as const\n\n// ----- Props -----\ntype WalletButtonProps = React.ComponentProps<\"button\"> & {\n  labels?: Partial<typeof LABELS>\n  asChild?: boolean\n  variant?: \"default\" | \"destructive\" | \"outline\" | \"secondary\" | \"ghost\" | \"link\"\n  size?: \"default\" | \"sm\" | \"lg\" | \"icon\"\n}\n\ntype Props = WalletButtonProps\n\nexport interface WalletListItemProps {\n  handleClick: React.MouseEventHandler<HTMLButtonElement>\n  tabIndex?: number\n  wallet: {\n    adapter: {\n      name: string\n      icon?: string\n    }\n    readyState: WalletReadyState\n  }\n}\n\n// ----- Wallet List Item -----\nexport const WalletListItem: FC<WalletListItemProps> = ({ handleClick, tabIndex, wallet }) => (\n  <Button onClick={handleClick} tabIndex={tabIndex} variant=\"outline\" className=\"justify-start w-full\">\n    {wallet.adapter.icon && (\n      <img\n        src={wallet.adapter.icon || \"/placeholder.svg\"}\n        alt={`${wallet.adapter.name} icon`}\n        className=\"mr-2 h-5 w-5\"\n      />\n    )}\n    {wallet.adapter.name}\n    {wallet.readyState === WalletReadyState.Installed && (\n      <span className=\"ml-auto text-xs text-green-500\">Detected</span>\n    )}\n  </Button>\n)\n\n// ----- Wallet Modal Component -----\nexport const WalletModal: FC<{\n  open: boolean\n  onOpenChange: (open: boolean) => void\n}> = ({ open, onOpenChange }) => {\n  const { wallets, select } = useWallet()\n  const [expanded, setExpanded] = useState(false)\n\n  // Access the modal context to get network information\n  const modalContext = React.useContext(ModalContext)\n  const isMainnet = modalContext?.isMainnet ?? true\n\n  const [listedWallets, collapsedWallets] = useMemo(() => {\n    const installed = wallets.filter((w) => w.readyState === WalletReadyState.Installed)\n    const notInstalled = wallets.filter((w) => w.readyState !== WalletReadyState.Installed)\n    return installed.length ? [installed, notInstalled] : [notInstalled, []]\n  }, [wallets])\n\n  const handleWalletClick = useCallback(\n    (event: React.MouseEvent<HTMLButtonElement>, walletName: string) => {\n      event.preventDefault()\n      select(walletName as WalletName)\n      onOpenChange(false)\n    },\n    [select, onOpenChange],\n  )\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle>\n            {listedWallets.length\n              ? \"Connect a wallet on Solana to continue\"\n              : \"You'll need a wallet on Solana to continue\"}\n          </DialogTitle>\n          <div className=\"text-sm text-muted-foreground\">\n            Network:{\" \"}\n            <span className={isMainnet ? \"text-green-500\" : \"text-yellow-500\"}>{isMainnet ? \"Mainnet\" : \"Devnet\"}</span>\n          </div>\n        </DialogHeader>\n\n        <div className=\"flex flex-col gap-2 py-4\">\n          {listedWallets.map((wallet) => (\n            <WalletListItem\n              key={wallet.adapter.name}\n              wallet={wallet}\n              handleClick={(e) => handleWalletClick(e, wallet.adapter.name)}\n            />\n          ))}\n\n          {collapsedWallets.length > 0 && (\n            <Collapsible open={expanded} onOpenChange={setExpanded} className=\"w-full\">\n              <CollapsibleTrigger asChild>\n                <Button variant=\"ghost\" className=\"w-full justify-between\">\n                  {expanded ? \"Less\" : \"More\"} options\n                </Button>\n              </CollapsibleTrigger>\n              <CollapsibleContent className=\"space-y-2 mt-2\">\n                {collapsedWallets.map((wallet) => (\n                  <WalletListItem\n                    key={wallet.adapter.name}\n                    wallet={wallet}\n                    handleClick={(e) => handleWalletClick(e, wallet.adapter.name)}\n                  />\n                ))}\n              </CollapsibleContent>\n            </Collapsible>\n          )}\n        </div>\n\n        <DialogClose asChild>\n          <Button variant=\"outline\" className=\"w-full mt-2\">\n            Close\n          </Button>\n        </DialogClose>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\n// ----- Wallet Multi Button -----\nexport function BaseWalletMultiButton({ children, labels = LABELS, ...props }: Props) {\n  const [walletModalOpen, setWalletModalOpen] = useState(false)\n  const [copied, setCopied] = useState(false)\n  const [menuOpen, setMenuOpen] = useState(false)\n  const [mounted, setMounted] = useState(false)\n\n  const { buttonState, onConnect, onDisconnect, publicKey, walletIcon, walletName } = useWalletMultiButton({\n    onSelectWallet() {\n      setWalletModalOpen(true)\n    },\n  })\n\n  // This effect runs only on the client after hydration\n  useEffect(() => {\n    setMounted(true)\n  }, [])\n\n  const content = useMemo(() => {\n    // Before component is mounted, always use \"Select Wallet\" to match SSR\n    if (!mounted) {\n      return labels[\"no-wallet\"]\n    }\n\n    // When connected, always show the wallet address\n    if (publicKey) {\n      const base58 = publicKey.toBase58()\n      return base58.slice(0, 4) + \"..\" + base58.slice(-4)\n    }\n\n    // When not connected, prioritize custom children text\n    if (children) {\n      return children\n    } else if (buttonState === \"connecting\") {\n      return labels[\"connecting\"]\n    } else {\n      return labels[\"has-wallet\"] // Use consistent label from LABELS\n    }\n  }, [buttonState, children, labels, publicKey, mounted])\n\n  // If not connected, show a simple button that opens the wallet modal\n  if (!publicKey) {\n    return (\n      <>\n        <WalletModal open={walletModalOpen} onOpenChange={setWalletModalOpen} />\n        <Button\n          {...props}\n          onClick={() => {\n            if (buttonState === \"has-wallet\" && onConnect) {\n              onConnect()\n            } else {\n              setWalletModalOpen(true)\n            }\n          }}\n        >\n          {content}\n        </Button>\n      </>\n    )\n  }\n\n  // If connected, show the dropdown menu\n  return (\n    <>\n      <WalletModal open={walletModalOpen} onOpenChange={setWalletModalOpen} />\n\n      <DropdownMenu open={menuOpen} onOpenChange={setMenuOpen}>\n        <DropdownMenuTrigger asChild>\n          <Button {...props}>\n            {walletIcon && <img src={walletIcon || \"/placeholder.svg\"} alt=\"Wallet icon\" className=\"mr-2 h-4 w-4\" />}\n            {content}\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent>\n          {publicKey && (\n            <DropdownMenuItem\n              onClick={async () => {\n                await navigator.clipboard.writeText(publicKey.toBase58())\n                setCopied(true)\n                setTimeout(() => setCopied(false), 400)\n              }}\n            >\n              {copied ? labels[\"copied\"] : labels[\"copy-address\"]}\n            </DropdownMenuItem>\n          )}\n          <DropdownMenuItem\n            onClick={() => {\n              setWalletModalOpen(true)\n              setMenuOpen(false)\n            }}\n          >\n            {labels[\"change-wallet\"]}\n          </DropdownMenuItem>\n          {onDisconnect && (\n            <DropdownMenuItem\n              onClick={() => {\n                onDisconnect()\n                setMenuOpen(false)\n              }}\n            >\n              {labels[\"disconnect\"]}\n            </DropdownMenuItem>\n          )}\n        </DropdownMenuContent>\n      </DropdownMenu>\n    </>\n  )\n}\n\n// ----- Public Exported Button -----\nexport function ConnectWalletButton(props: WalletButtonProps) {\n  return <BaseWalletMultiButton {...props} />\n}\n",
      "type": "registry:component",
      "target": "components/ui/murphy/connect-wallet-button.tsx"
    },
    {
      "path": "hook/murphy/use-walletMultiButton.ts",
      "content": "import { useWallet, type Wallet } from '@solana/wallet-adapter-react';\nimport type { PublicKey } from '@solana/web3.js';\nimport { useCallback } from 'react';\n\ntype ButtonState = {\n    buttonState: 'connecting' | 'connected' | 'disconnecting' | 'has-wallet' | 'no-wallet';\n    onConnect?: () => void;\n    onDisconnect?: () => void;\n    onSelectWallet?: () => void;\n    publicKey?: PublicKey;\n    walletIcon?: Wallet['adapter']['icon'];\n    walletName?: Wallet['adapter']['name'];\n};\n\ntype Config = {\n    onSelectWallet: (config: {\n        onSelectWallet: (walletName: Wallet['adapter']['name']) => void;\n        wallets: Wallet[];\n    }) => void;\n};\n\nexport function useWalletMultiButton({ onSelectWallet }: Config): ButtonState {\n    const { connect, connected, connecting, disconnect, disconnecting, publicKey, select, wallet, wallets } =\n        useWallet();\n    let buttonState: ButtonState['buttonState'];\n    if (connecting) {\n        buttonState = 'connecting';\n    } else if (connected) {\n        buttonState = 'connected';\n    } else if (disconnecting) {\n        buttonState = 'disconnecting';\n    } else if (wallet) {\n        buttonState = 'has-wallet';\n    } else {\n        buttonState = 'no-wallet';\n    }\n    const handleConnect = useCallback(() => {\n        connect().catch(() => {\n            // Silently catch because any errors are caught by the context `onError` handler\n        });\n    }, [connect]);\n    const handleDisconnect = useCallback(() => {\n        disconnect().catch(() => {\n            // Silently catch because any errors are caught by the context `onError` handler\n        });\n    }, [disconnect]);\n    const handleSelectWallet = useCallback(() => {\n        onSelectWallet({ onSelectWallet: select, wallets });\n    }, [onSelectWallet, select, wallets]);\n    return {\n        buttonState,\n        onConnect: buttonState === 'has-wallet' ? handleConnect : undefined,\n        onDisconnect: buttonState !== 'disconnecting' && buttonState !== 'no-wallet' ? handleDisconnect : undefined,\n        onSelectWallet: handleSelectWallet,\n        publicKey: publicKey ?? undefined,\n        walletIcon: wallet?.adapter.icon,\n        walletName: wallet?.adapter.name,\n    };\n}\n",
      "type": "registry:hook",
      "target": "hook/murphy/use-walletMultiButton.ts"
    },
    {
      "path": "hook/murphy/use-walletModal.ts",
      "content": "import { createContext, useContext } from 'react';\n\nexport interface WalletModalContextState {\n    visible: boolean;\n    setVisible: (open: boolean) => void;\n}\n\nconst DEFAULT_CONTEXT = {\n    setVisible(_open: boolean) {\n        console.error(constructMissingProviderErrorMessage('call', 'setVisible'));\n    },\n    visible: false,\n};\nObject.defineProperty(DEFAULT_CONTEXT, 'visible', {\n    get() {\n        console.error(constructMissingProviderErrorMessage('read', 'visible'));\n        return false;\n    },\n});\n\nfunction constructMissingProviderErrorMessage(action: string, valueName: string) {\n    return (\n        'You have tried to ' +\n        ` ${action} \"${valueName}\"` +\n        ' on a WalletModalContext without providing one.' +\n        ' Make sure to render a WalletModalProvider' +\n        ' as an ancestor of the component that uses ' +\n        'WalletModalContext'\n    );\n}\n\nexport const WalletModalContext = createContext<WalletModalContextState>(DEFAULT_CONTEXT as WalletModalContextState);\n\nexport function useWalletModal(): WalletModalContextState {\n    return useContext(WalletModalContext);\n}\n",
      "type": "registry:hook",
      "target": "hook/murphy/use-walletModal.ts"
    }
  ]
}
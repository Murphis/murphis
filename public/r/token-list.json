{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "token-list",
  "type": "registry:block",
  "title": "Token List",
  "description": "A simple token list component.",
  "dependencies": [
    "@solana/web3.js",
    "@solana/spl-token",
    "@solana/wallet-adapter-react"
  ],
  "registryDependencies": [
    "input",
    "button",
    "form",
    "card",
    "sonner",
    "select",
    "dialog",
    "dropdown-menu"
  ],
  "files": [
    {
      "path": "components/ui/murphis/token-list.tsx",
      "content": "\"use client\";\n\nimport React from \"react\";\nimport Link from \"next/link\";\nimport { ExternalLinkIcon } from \"lucide-react\";\n\nimport { shortAddress, formatUsd, formatNumberShort, cn } from \"@/lib/utils\";\nimport { SolAsset } from \"@/types/swap\";\n\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\nimport { TokenIcon } from \"./token-icon\";\n\ntype TokenListProps = {\n  assets: SolAsset[];\n  showBalances?: boolean;\n  onClick?: (token: SolAsset) => void;\n};\n\nconst TokenList = ({\n  assets,\n  showBalances = true,\n  onClick,\n}: TokenListProps) => {\n  return (\n    <Table>\n      <TableHeader>\n        <TableRow className=\"hover:bg-transparent\">\n          <TableHead>Token</TableHead>\n          <TableHead>Mint</TableHead>\n          <TableHead>Price</TableHead>\n          {showBalances && <TableHead>Balance</TableHead>}\n          {showBalances && <TableHead>Value</TableHead>}\n        </TableRow>\n      </TableHeader>\n      <TableBody>\n        {assets.length === 0 ? (\n          <>\n            {[...Array(3)].map((_, index) => (\n              <TableRow key={index} className=\"hover:bg-transparent\">\n                {[...Array(showBalances ? 5 : 3)].map((_, index) => (\n                  <TableCell key={index}>\n                    {index === 0 ? (\n                      <div className=\"flex items-center gap-3\">\n                        <Skeleton className=\"h-[32px] w-[32px] shrink-0 rounded-full\" />\n                        <Skeleton className=\"h-[22px] w-full\" />\n                      </div>\n                    ) : (\n                      <Skeleton className=\"h-[22px] w-full\" />\n                    )}\n                  </TableCell>\n                ))}\n              </TableRow>\n            ))}\n          </>\n        ) : (\n          assets.map((asset) => (\n            <TableRow\n              key={asset.mint.toBase58()}\n              className={cn(\n                \"group odd:bg-muted/25 hover:bg-transparent hover:text-primary hover:odd:bg-muted/25\",\n                onClick && \"cursor-pointer\",\n              )}\n              onClick={() => onClick && onClick(asset)}\n            >\n              <TableCell>\n                <div className=\"flex items-center gap-2 font-medium\">\n                  <TokenIcon asset={asset} />\n                  {asset.symbol}\n                </div>\n              </TableCell>\n              <TableCell>\n                <Link\n                  href={`https://solscan.io/token/${asset.mint.toBase58()}`}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"group inline-flex items-center gap-1\"\n                  onClick={(e) => e.stopPropagation()}\n                >\n                  <span className=\"border-b border-transparent group-hover:border-border\">\n                    {shortAddress(asset.mint.toBase58())}\n                  </span>\n                  <ExternalLinkIcon size={16} />\n                </Link>\n              </TableCell>\n              <TableCell>{formatUsd(asset.price || 0)}</TableCell>\n              {showBalances && (\n                <>\n                  <TableCell>\n                    {asset.userTokenAccount?.amount &&\n                      formatNumberShort(asset.userTokenAccount.amount)}\n                  </TableCell>\n                  <TableCell>\n                    {asset.userTokenAccount?.amount &&\n                      formatUsd(\n                        asset.userTokenAccount.amount * (asset.price || 0),\n                      )}\n                  </TableCell>\n                </>\n              )}\n            </TableRow>\n          ))\n        )}\n      </TableBody>\n    </Table>\n  );\n};\n\nexport { TokenList };",
      "type": "registry:component",
      "target": "components/ui/murphis/token-list.tsx"
    }
  ]
}